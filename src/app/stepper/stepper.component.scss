
// .selected {
//    background-color: #cccccc;
// }

// ::ng-deep .mat-step-label mat-icon {
//     display: none;
// }

// ::ng-deep .mat-step-label-selected mat-icon {
//     display: inline-block;
// }

// ::ng-deep .mat-vertical-stepper-header {
//     pointer-events: none !important;
// }

.number {    
    border-radius: 45px;
    padding: 4px 8px;
    color: #fff;
    &-pending {
        background-color: grey;
    }
    &-complete {
        background-color: green;
    }
}

// ::ng-deep {
//     .mat-step-header .mat-step-icon-state-edit {
//         background-color: green;
//         color: #fff;
//     }
//     .mat-step-header .mat-step-icon-selected {
//         background-color: grey;
//         color: #fff;
//     }
//     // .mat-step-header .mat-step-icon-state-done {
//     //     background-color: green;
//     //     color: #fff;
//     // }
// }

// .mat-stepper-horizontal {
//     margin-top: 8px;
//   }
  
//   .mat-form-field {
//     margin-top: 16px;
//   }

:host ::ng-deep {
    $start: 1;
    $five: 5;
    @for $i from $start to $five {
        mat-vertical-stepper.step#{$i}Completed div.mat-step:nth-of-type(#{$i}) {
            .mat-vertical-content-container, .mat-vertical-stepper-content, .mat-stepper-vertical-line::before {
                border-left-color: green;
            }
        }
        mat-vertical-stepper.step#{$i}Pending div.mat-step:nth-of-type(#{$i}) {
            .mat-step-header {
                cursor: not-allowed;
            }
        }
    }
}
    // @debug var(--count);
    // @if var(--count) == '3' {
    //     $start: 3;
    // } @else {
    // }
    .fill-color {
        display: block;
        height: 40px;
        width: 40px;
        color: var(--coolor);
    }
    .multi {
        $four: 5;
        $three: 3;
        @for $i from $three to $four {
            p:nth-of-type(#{$i}) {
                padding: 20px;
                color: var(--colo);
            }
        }
    }

// @function to-number($value) {
//     @if type-of($value) == 'number' {
//       @return $value;
//     } @else if type-of($value) != 'string' {
//       @error 'Value for `to-number` should be a number or a string.';
//     }
  
//     $result: 0;
//     $digits: 0;
//     $minus: str-slice($value, 1, 1) == '-';
//     $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
  
//     @for $i from if($minus, 2, 1) through str-length($value) {
//       $character: str-slice($value, $i, $i);
  
//       @if (index(map-keys($numbers), $character) or $character == '.') {
//         @if $character == '.' {
//           $digits: 1; 
//         } @else if $digits == 0 {
//           $result: $result * 10 + map-get($numbers, $character);  
//         } @else {
//           $digits: $digits * 10;
//           $result: $result + map-get($numbers, $character) / $digits;
//         }
//       }
//     }
  
//     @return if($minus, -$result, $result);;
//   }
